name: 'File Changes'

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  change-files-checks:
    runs-on: ubuntu-latest
    permissions:
      issues: write   

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Extract added lines
        id: extract-added-lines
        run: |
          branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          echo "$branch"
          
          # Fetch the latest changes from the remote repository
          git fetch origin main
          git fetch origin $branch
          
          # Get the added lines between origin/main and origin/$branch
          added_lines=$(git diff origin/main..origin/$branch -- CMS/internationalisation_de_DE.json | grep '^+' | tail -n +2 | sed 's/^+ //' | sed 's/,$//')
          removed_lines=$(git diff origin/main..origin/$branch -- CMS/internationalisation_de_DE.json | grep '^-' | tail -n +2 | sed 's/^- //' | sed 's/,$//')

          # Use comm to find common lines between added_lines and removed_lines
          common_lines=$(comm -12 <(echo "$added_lines" | sort) <(echo "$removed_lines" | sort))
          
          # Remove common lines from added_lines and removed_lines if exist
          if [ -n "$common_lines" ]; then
          added_lines=$(grep -vFf <(echo "$common_lines") <(echo "$added_lines"))
          removed_lines=$(grep -vFf <(echo "$common_lines") <(echo "$removed_lines"))
          fi

          echo "Added Lines:"
          echo "$added_lines"
          echo "Removed Lines:"
          echo "$removed_lines"
          echo "::set-output name=hamada::${added_lines}"
          echo "::set-output name=removed_lines::${removed_lines}"

      - name: Create new issue
        id: create-issue
        run: |
          added_lines="${{ steps.extract-added-lines.outputs.hamada }}"
          echo "Added changes: $hamada"
          title="Found a bug"
          removed_quotes=$(echo "${{ steps.extract-added-lines.outputs.hamada }}"| tr -d '"')
          echo "$removed_quotes"
          body="$removed_quotes"
          labels="[\"bug\"]"

          response=$(curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/Mahmoudn1/github-action/issues \
            -d "{\"title\":\"$title\",\"body\":\"$body\",\"labels\":$labels}")

          # Set the output variable
          issue_id=$(echo "$response" | jq -r '.node_id')
          echo "::set-output name=issue_id::${issue_id}"

      - name: Add Item to The Project
        id: add-item
        run: |
          echo "Added changes: ${{ steps.create-issue.outputs.issue_id }}"
          issue_id="${{ steps.create-issue.outputs.issue_id }}"
          response=$(curl --request POST \
            --url https://api.github.com/graphql \
            --header 'Authorization: Bearer ${{ secrets.MY_SECRET }}' \
            --data '{"query":"mutation {addProjectV2ItemById(input: {projectId: \"PVT_kwHOBYJ8084AYkeK\" contentId: \"'"$issue_id"'\"}) {item {id}}}"}')
          
          echo "$response"
