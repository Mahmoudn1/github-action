name: 'File Changes'

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  change-files-checks:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Get all changed markdown files
        id: changed-markdown-files
        uses: tj-actions/changed-files@v40
        with:
          files: |
             **.json

      - name: Print added changes in markdown files
        run: |
          added_changes=()  # Initialize an empty array
          for file in ${{ steps.changed-markdown-files.outputs.all_changed_files }}; do
            echo "Added changes in $file:"
            # Get the content of the file in the base branch (usually main or master)
            base_content=$(git show origin/main:"$file")
            
            # Get the content of the file in the current branch
            current_content=$(cat "$file")
            
            # Use diff to compare the contents and add lines with meaningful changes to the array
            while IFS= read -r line; do
              if [[ "$line" =~ ^\+[^+]{1,}$ && ! "$line" =~ ^\+{.*}$ ]]; then
                added_changes+=("${line:1}")  # Remove the leading '+'
              fi
            done < <(diff -u <(echo "$base_content") <(echo "$current_content") | grep '^\+')
            
            # Drop the first item in added_changes
            added_changes=("${added_changes[@]:1}")
            
            # Print all added changes
            for added_line in "${added_changes[@]}"; do
              echo "$added_line"
            done
          done
      - name: Add changes to project board
        if: success()  # Only execute this step if the previous steps were successful
        run: |
          # Extract repository owner and name
          IFS='/' read -ra REPO <<< "$(basename $GITHUB_REPOSITORY)"
          REPO_OWNER="${REPO[0]}"
          REPO_NAME="${REPO[1]}"

          echo "Owner and Repo"
          echo "$REPO_OWNER"
          echo "$REPO_NAME"
          echo "echo REPO"

          # Create a new issue for each added line
          echo "${{ steps.print-changes.outputs.printed_changes }}"

          # Extract the card ID from the response if needed
          card_id=$(echo "$response" | jq -r '.id')

          # Print the card ID if needed
          echo "Added a card with ID: $card_id"
